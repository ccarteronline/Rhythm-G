import flash.events.MouseEvent;import flash.events.Event;import recorder;import flash.filters.GlowFilter;function settingsPad(padBool:Boolean){		var numLibrary:Number = 4;	var onlineBtnState:Boolean;	var loopBtnState:Boolean;	var customBtnState:Boolean; 							//objects as variables		var __onlineButton = __root.settingsPad.onlineButton;		var __loopButton = __root.settingsPad.loopButton;		var __customLibButton = __root.settingsPad.customLibButton;		var recordButton = __root.settingsPad.recordButton;		var sequenceRecord = __root.settingsPad.sequenceRecord;		var shortSoundToggleBtn = __root.settingsPad.soundToggle;				var __libraryBtn_1 = __root.settingsPad.libraryBtn_1;		var __libraryBtn_2 = __root.settingsPad.libraryBtn_2;		var __libraryBtn_3 = __root.settingsPad.libraryBtn_3;		var __libraryBtn_4 = __root.settingsPad.libraryBtn_4;				var myNumberScrubber = __root.settingsPad.dialPadButton;					if(padBool == true){		trace("Settings pad turned on");				//load defualt library (drums)		customLib_1 = true;		__root.settingsPad.hudText.text ="LIB: 1 DRUMS";		__libraryBtn_1.gotoAndStop(2);		///////////load default short false off/////		shortSoundToggleBtn.gotoAndStop(2);													dragNumberButton(myNumberScrubber);//enable control of dialpad to scrub through numbers						//Online button////////////////////////////////////////////////////////		include "onlineSounds.as";		__onlineButton.onState.addEventListener(MouseEvent.CLICK, onlineOn);		__onlineButton.offState.addEventListener(MouseEvent.CLICK, onlineOff);		//		onlineBtnOff("");//set the default position of the online button  (off)		//		function onlineOn(e:MouseEvent){			onlineBtnOn();		}		function onlineOff(e:MouseEvent){			onlineBtnOff("ONLINE SOUNDS OFF");		}		//////////////////////////////////////////////////////////////////////							//Loop sounds button////////////////////////////////////////////////////////				include "loopSounds.as"		__loopButton.onState.addEventListener(MouseEvent.CLICK, loopOn);		__loopButton.offState.addEventListener(MouseEvent.CLICK, loopOff);		//		loopBtnOff("");//set the default posistion of the loop button (off)		//				function loopOn(e:MouseEvent){			loopBtnOn();		}		function loopOff(e:MouseEvent){			loopBtnOff("BLOCK: " + currentBlock + " LOOP OFF");		}				///Short Sound toggle/////////////////////////////////////////////////////////		//include "loopSounds.as"		shortSoundToggleBtn.onState.addEventListener(MouseEvent.CLICK, shortSoundsOn);		shortSoundToggleBtn.offState.addEventListener(MouseEvent.CLICK, shortSoundsOff);		//					function shortSoundsOn(e:MouseEvent){			__root.settingsPad.hudText.text ="SHORT SOUNDS ON";			shortSoundState = true;			shortSoundToggleBtn.gotoAndStop(1);		}		function shortSoundsOff(e:MouseEvent){			__root.settingsPad.hudText.text ="SHORT SOUNDS OFF";			shortSoundState = false;			shortSoundToggleBtn.gotoAndStop(2);		}		////////////////////////////////////////////////////////////////////////////								//Custom Sounds/////////////////////////////////////////////////////////////		include "customButtons.as";				__customLibButton.onState.addEventListener(MouseEvent.CLICK, customOn);		__customLibButton.offState.addEventListener(MouseEvent.CLICK, customOff);				customSounds(false);//set the default posistion of the custom sounds button (off)				function customOn(e:MouseEvent){			__customLibButton.gotoAndStop(1);			customBtnState = true;			__root.settingsPad.hudText.text ="CUSTOM SOUNDS ON";			__root.mpcPad["block_" + currentBlock].libraryCon.alpha = 100;		}		function customOff(e:MouseEvent){			__customLibButton.gotoAndStop(2);			customBtnState = false;			__root.settingsPad.hudText.text ="CUSTOM SOUNDS OFF";			__root.mpcPad["block_" + currentBlock].libraryCon.alpha = 0;		}		//Custom Instrument Buttons		for(var inc:Number = 1; inc <= numLibrary; inc++){			var btnState = this["customLib_" + inc];			var libBtn = MovieClip(root).settingsPad["libraryBtn_" + inc];			libBtn.addEventListener(MouseEvent.CLICK, btnOnClick);						function resetButtons(){				//turn off all the buttons				__libraryBtn_1.gotoAndStop(1);				__libraryBtn_2.gotoAndStop(1);				__libraryBtn_3.gotoAndStop(1);				__libraryBtn_4.gotoAndStop(1);				customLib_1 = false;				customLib_2 = false;				customLib_3 = false;				customLib_4 = false;			}						function btnOnClick(e:MouseEvent){								if(e.currentTarget.name == "libraryBtn_1"){					if(customLib_1 == true){						//__libraryBtn_1.gotoAndStop(1);						customLib_1 = false;					}else{						//reset the buttons and their state first then set it to on and its state true						resetButtons();						__libraryBtn_1.gotoAndStop(2);						customLib_1 = true;						__root.settingsPad.hudText.text ="LIB: 1 DRUMS";					}				}else if(e.currentTarget.name == "libraryBtn_2"){					if(customLib_2 == true){						//__libraryBtn_2.gotoAndStop(1);						customLib_2 = false;					}else{						//reset the buttons and their state first then set it to on and its state true						resetButtons();						__libraryBtn_2.gotoAndStop(2);						customLib_2 = true;						__root.settingsPad.hudText.text ="LIB: 2 SYNTH";					}				}else if(e.currentTarget.name == "libraryBtn_3"){					if(customLib_3 == true){						//__libraryBtn_3.gotoAndStop(1);						customLib_3 = false;					}else{						//reset the buttons and their state first then set it to on and its state true						resetButtons();						__libraryBtn_3.gotoAndStop(2);						customLib_3 = true;						__root.settingsPad.hudText.text = "LIB: 3 SYNTH";					}				}else if(e.currentTarget.name == "libraryBtn_4"){					if(customLib_4 == true){						//__libraryBtn_4.gotoAndStop(1);						customLib_4 = false;					}else{						//reset the buttons and their state first then set it to on and its state true						resetButtons();						__libraryBtn_4.gotoAndStop(2);						customLib_4 = true;						__root.settingsPad.hudText.text ="LIB: 4 MISC";					}				}			}//end function		}//end loop		////////////////////////////////////////////////////////////////////////////								//Record Audio Button		recordButton.addEventListener(MouseEvent.MOUSE_DOWN, recChange);		recordButton.addEventListener(MouseEvent.MOUSE_UP, recChangeUp);		recordButton.addEventListener(MouseEvent.MOUSE_OUT, recMouseOut);		function recMouseOut(e:MouseEvent){			e.currentTarget.gotoAndStop(1);		}		function recChange(e:MouseEvent){			e.currentTarget.gotoAndStop(2);		}		function recChangeUp(e:MouseEvent){			//show that the customsound(recordswitch) is on			__customLibButton.gotoAndStop(1);			//chage the look of the recording button			e.currentTarget.gotoAndStop(1);			//record the sound and handle sound storage and playback			myRecorder.recordSound(currentBlock);						//Set the library to 100% visible so that I can know that it will the recorded sound only			__root.mpcPad["block_" + currentBlock].libraryCon.alpha = 100;						//change the look of the mod to show user that they are recording.			if(__root.settingsPad.displayMod.currentFrame == 1){				//not recording animate				__root.settingsPad.displayMod.gotoAndPlay(2);				__root.settingsPad.hudText.textColor = 0xFFCC66;				__root.settingsPad.hudText.text ="RECORDING ON: " + currentBlock;				__root.settingsPad.recordButton.gotoAndStop(3);				//__root.settingsPad.recOverlay.visible = true;//remove from brandon.				//multiTouchGestures(false);//disable multitouch gestures so that you can move the dial left to right			}else{				//recording, put the item back to frame 1				checkFirstRun();				__root.settingsPad.displayMod.gotoAndStop(1);				__root.settingsPad.hudText.text ="RECORDED ON: " + currentBlock;				__root.settingsPad.hudText.textColor = 0xA8E9FF;				//__root.settingsPad.recOverlay.visible = false;				multiTouchGestures(true);//enable multitouch gestures so that you can move the dial left to right			}					}//end recChangeUp		//Record Sequence button functionality		sequenceRecord.addEventListener(MouseEvent.MOUSE_DOWN, recSecChange);		sequenceRecord.addEventListener(MouseEvent.MOUSE_UP, recSecChangeUp);		sequenceRecord.addEventListener(MouseEvent.MOUSE_OUT, recSecMouseOut);				function recSecMouseOut(e:MouseEvent){			e.currentTarget.gotoAndStop(1);		}				function recSecChange(e:MouseEvent){			e.currentTarget.gotoAndStop(2);		}				function recSecChangeUp(e:MouseEvent){			e.currentTarget.gotoAndStop(3);			trace("you are recording a Sequence");			if(sequenceGod.isRecording){				//dont create anything, throw an error			}else{				sequenceGod.create();			}					}			}else{		trace('Settings Pad disabled');		//turn off visibility		__root.settingsPad.visible = false;	}}function dragNumberButton(controlItm){	// define lock on y-axis	var LOCKY:Number = controlItm.y;		// MouseEvent.MOUSE_MOVE	stage.addEventListener(MouseEvent.MOUSE_MOVE, _mouseMove);	function _mouseMove(e:MouseEvent):void	{		if(controlItm.y != LOCKY) controlItm.y = LOCKY;		__root.settingsPad.dialHitter.x = controlItm.x;	}		// dragging	controlItm.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDown);	function _mouseDown(e:MouseEvent):void	{		multiTouchGestures(false);//disable multitouch gestures so that you can move the dial left to right		controlItm.startDrag();		controlItm.addEventListener(MouseEvent.MOUSE_UP, _mouseUp);				//-477.05		trace("moving: " + controlItm.x);						//move the invisible pointers x position to match the dialpads for the hittests		__root.settingsPad.dialHitter.x = controlItm.x;		__root.settingsPad.dialHitter.addEventListener(Event.ENTER_FRAME, hitTargetCheck);	}		// dropping	function _mouseUp(e:MouseEvent):void	{				if(dialBoundaryState_1){//if user moves too far left			controlItm.x = -477.05;			dialBoundaryState_1 = false;			multiTouchGestures(true);					}else if(dialBoundaryState_2){//if user moves too far right			controlItm.x = 498.25;			dialBoundaryState_2 = false;			multiTouchGestures(true);				}else{			multiTouchGestures(true);//enable the multigestures again when user mouse their finger up			controlItm.stopDrag();			controlItm.removeEventListener(MouseEvent.MOUSE_UP, _mouseUp);			__root.settingsPad.dialHitter.removeEventListener(Event.ENTER_FRAME, hitTargetCheck);		//		}	}}//end dragnumberbutton functionfunction hitTargetCheck(event:Event){	//check if user slides too far left or too far right.		if(event.currentTarget.x < -482.05){//checks to see if user moves to far left		trace("STOP, move the slider back....");		event.currentTarget.stopDrag();		dialBoundaryState_1 = true;		__root.settingsPad.dialHitter.removeEventListener(Event.ENTER_FRAME, hitTargetCheck);	}else if(event.currentTarget.x > 498.25){//checks to see if user moves too far right.		event.currentTarget.stopDrag();		dialBoundaryState_2 = true;		__root.settingsPad.dialHitter.removeEventListener(Event.ENTER_FRAME, hitTargetCheck);	}else{		trace("RUNNING NORMALLY");	}		//Run the loop to check status of known blocks below	for(var num:Number = 1; num<= 24; num++){		if(event.currentTarget.hitTestObject(MovieClip(root).settingsPad["dot_" + num])){			checkFirstRun();			__root.settingsPad.hudText.text = "block: " + num;//place the block and its number you selected in the HUD			currentBlock = num;//store the current block to use for all other processes						//check to see if the the block that is selected has a loop, toggle visibility accordingly			if(__root.mpcPad["block_" + currentBlock].loopIcon.alpha == 0){				__root.settingsPad.loopButton.gotoAndStop(2);//the current value is off, so show that it is			}else{				__root.settingsPad.loopButton.gotoAndStop(1);//the current value is on, so show that it is			}						//check to see if the the block thats selected has a recored sound on it			if(__root.mpcPad["block_" + currentBlock].libraryCon.alpha == 0){				__root.settingsPad.customLibButton.gotoAndStop(2);			}else{				__root.settingsPad.customLibButton.gotoAndStop(1);			}						//check to see if the block thats selected has an online sound on it			if(__root.mpcPad["block_" + currentBlock].onlineButton.alpha == 0){				__root.settingsPad.onlineButton.gotoAndStop(2);			}else{				__root.settingsPad.onlineButton.gotoAndStop(1);			}					}//	}}//end hit target check//Tap recording objectMovieClip(root).mpcPad.tapRecord.addEventListener(MouseEvent.CLICK, doTapRecord);function doTapRecord(e:MouseEvent){	tapRecordState = true;//the user has tapped, listen or record the steps of the users taps.}