package {	import flash.media.Microphone;	import flash.events.SampleDataEvent;	import flash.utils.ByteArray;	import flash.events.Event;	import flash.media.SoundMixer;	import flash.media.AudioPlaybackMode;	import flash.media.Sound;	import flash.media.SoundChannel;	public class recorder{		var mic:Microphone;//device microphone		var passThisNumber; //set the variable passThisNumber as the same number of the recorded block		var nowRecording:Boolean = false;		var nowPlaying:Boolean;		var storedNumber:Number;				//define record states:		var recordedSoundState_1:Boolean = false;		var recordedSoundState_2:Boolean = false;		var recordedSoundState_3:Boolean = false;		var recordedSoundState_4:Boolean = false;		var recordedSoundState_5:Boolean = false;		var recordedSoundState_6:Boolean = false;		var recordedSoundState_7:Boolean = false;		var recordedSoundState_8:Boolean = false;		var recordedSoundState_9:Boolean = false;		var recordedSoundState_10:Boolean = false;		var recordedSoundState_11:Boolean = false;		var recordedSoundState_12:Boolean = false;		var recordedSoundState_13:Boolean = false;		var recordedSoundState_14:Boolean = false;		var recordedSoundState_15:Boolean = false;		var recordedSoundState_16:Boolean = false;		var recordedSoundState_17:Boolean = false;		var recordedSoundState_18:Boolean = false;		var recordedSoundState_19:Boolean = false;		var recordedSoundState_20:Boolean = false;		var recordedSoundState_21:Boolean = false;		var recordedSoundState_22:Boolean = false;		var recordedSoundState_23:Boolean = false;		var recordedSoundState_24:Boolean = false;				//define byteArrays		var recordedBytes_1:ByteArray  = new ByteArray();		var recordedBytes_2:ByteArray = new ByteArray();		var recordedBytes_3:ByteArray = new ByteArray();		var recordedBytes_4:ByteArray = new ByteArray();		var recordedBytes_5:ByteArray = new ByteArray();		var recordedBytes_6:ByteArray = new ByteArray();		var recordedBytes_7:ByteArray = new ByteArray(); 		var recordedBytes_8:ByteArray = new ByteArray();		var recordedBytes_9:ByteArray = new ByteArray();		var recordedBytes_10:ByteArray = new ByteArray();		var recordedBytes_11:ByteArray = new ByteArray();		var recordedBytes_12:ByteArray = new ByteArray();		var recordedBytes_13:ByteArray = new ByteArray();		var recordedBytes_14:ByteArray = new ByteArray();		var recordedBytes_15:ByteArray = new ByteArray();		var recordedBytes_16:ByteArray = new ByteArray();		var recordedBytes_17:ByteArray = new ByteArray();		var recordedBytes_18:ByteArray = new ByteArray();		var recordedBytes_19:ByteArray = new ByteArray();		var recordedBytes_20:ByteArray = new ByteArray();		var recordedBytes_21:ByteArray = new ByteArray();		var recordedBytes_22:ByteArray = new ByteArray();		var recordedBytes_23:ByteArray = new ByteArray();		var recordedBytes_24:ByteArray = new ByteArray();						var sound_1:Sound = new Sound();		var sound_2:Sound = new Sound();		var sound_3:Sound = new Sound();		var sound_4:Sound = new Sound();		var sound_5:Sound = new Sound();		var sound_6:Sound = new Sound();		var sound_7:Sound = new Sound();		var sound_8:Sound = new Sound();		var sound_9:Sound = new Sound();		var sound_10:Sound = new Sound();		var sound_11:Sound = new Sound();		var sound_12:Sound = new Sound();		var sound_13:Sound = new Sound();		var sound_14:Sound = new Sound();		var sound_15:Sound = new Sound();		var sound_16:Sound = new Sound();		var sound_17:Sound = new Sound();		var sound_18:Sound = new Sound();		var sound_19:Sound = new Sound();		var sound_20:Sound = new Sound();		var sound_21:Sound = new Sound();		var sound_22:Sound = new Sound();		var sound_23:Sound = new Sound();		var sound_24:Sound = new Sound();				var sc_1:SoundChannel = new SoundChannel;		var sc_2:SoundChannel = new SoundChannel;		var sc_3:SoundChannel = new SoundChannel;		var sc_4:SoundChannel = new SoundChannel;		var sc_5:SoundChannel = new SoundChannel;		var sc_6:SoundChannel = new SoundChannel;		var sc_7:SoundChannel = new SoundChannel;		var sc_8:SoundChannel = new SoundChannel;		var sc_9:SoundChannel = new SoundChannel;		var sc_10:SoundChannel = new SoundChannel;		var sc_11:SoundChannel = new SoundChannel;		var sc_12:SoundChannel = new SoundChannel;		var sc_13:SoundChannel = new SoundChannel;		var sc_14:SoundChannel = new SoundChannel;		var sc_15:SoundChannel = new SoundChannel;		var sc_16:SoundChannel = new SoundChannel;		var sc_17:SoundChannel = new SoundChannel;		var sc_18:SoundChannel = new SoundChannel;		var sc_19:SoundChannel = new SoundChannel;		var sc_20:SoundChannel = new SoundChannel;		var sc_21:SoundChannel = new SoundChannel;		var sc_22:SoundChannel = new SoundChannel;		var sc_23:SoundChannel = new SoundChannel;		var sc_24:SoundChannel = new SoundChannel;						public function recorder(blockRec:Number){									//			passThisNumber = blockRec;													SoundMixer.audioPlaybackMode = AudioPlaybackMode.MEDIA;				mic = Microphone.getMicrophone();			SoundMixer.useSpeakerphoneForVoice = true;						mic.gain = 50;			mic.setSilenceLevel(5);			mic.rate = 44;											}//end function								public function recordSound(myBlockNumb:Number){			trace("hello there!");			storedNumber = myBlockNumb;			if(nowRecording){//if recording, STOP, then move the position of the audio back to its place					trace('Stopped');					mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, getMicAudio);					this.nowRecording= false;					this["recordedBytes_" + myBlockNumb].position = 0;					//user has recorded a sound let the program know it					this["recordedSoundState_" + myBlockNumb] = true;					///// create the sampledata event listener after a successful recording to avoid memory leak?					var myFunction = this["playAudio_" + myBlockNumb];					this["sound_" + myBlockNumb].addEventListener(SampleDataEvent.SAMPLE_DATA, myFunction);								}else{					trace("Recording... for block:" + myBlockNumb  );					this['recordedBytes_' + myBlockNumb].clear();					mic.addEventListener(SampleDataEvent.SAMPLE_DATA, getMicAudio);					this.nowRecording = true;			}		}						public function getMicAudio(e:SampleDataEvent){			//write the data using the passThisNumber to its specific bank			this["recordedBytes_" + storedNumber].writeBytes(e.data);		}				///		 public function onComplete(e:Event= null){					trace("stopped");					this["sound_" + storedNumber].removeEventListener(SampleDataEvent.SAMPLE_DATA, this["playAudio_"+ storedNumber]);										nowPlaying = false;					trace("what is the number?" + storedNumber);		}						//play audio functions		//Later to make this more dynamic and reusable. Place all 24 functions in one giant function that will loop through all of them				public function playAudio(soundNum:Number){			//			this["recordedBytes_" + soundNum].position = 0;			storedNumber = soundNum;			this["sc_" + soundNum] = this["sound_" + soundNum].play();		}							public function loopRecordedAudio(soundNum:Number){			this["sc_" + soundNum] = this["sound_" + soundNum].play();			var myLoop = this["loop_" + soundNum];			this["sc_" + soundNum].addEventListener(Event.SOUND_COMPLETE, myLoop, false, 0, true);//loop through again		}								public function stopAudio(soundNum:Number){			this["sc_" + soundNum].stop();			this["recordedBytes_" + soundNum].position = 0;		}								//handle all looping functions				private function loop_1(e:Event){			recordedBytes_1.position = 0;			sc_1 = sound_1.play();//repeat the sound over and over again.			sc_1.addEventListener(Event.SOUND_COMPLETE, loop_1, false, 0, true);//loop through again		}		private function loop_2(e:Event){			recordedBytes_2.position = 0;			sc_2 = sound_2.play();//repeat the sound over and over again.			sc_2.addEventListener(Event.SOUND_COMPLETE, loop_2, false, 0, true);//loop through again		}		private function loop_3(e:Event){			recordedBytes_3.position = 0;			sc_3 = sound_3.play();//repeat the sound over and over again.			sc_3.addEventListener(Event.SOUND_COMPLETE, loop_3, false, 0, true);//loop through again		}		private function loop_4(e:Event){			recordedBytes_4.position = 0;			sc_4 = sound_4.play();//repeat the sound over and over again.			sc_4.addEventListener(Event.SOUND_COMPLETE, loop_4, false, 0, true);//loop through again		}		private function loop_5(e:Event){			recordedBytes_5.position = 0;			sc_5 = sound_5.play();//repeat the sound over and over again.			sc_5.addEventListener(Event.SOUND_COMPLETE, loop_5, false, 0, true);//loop through again		}		private function loop_6(e:Event){			recordedBytes_6.position = 0;			sc_6 = sound_6.play();//repeat the sound over and over again.			sc_6.addEventListener(Event.SOUND_COMPLETE, loop_6, false, 0, true);//loop through again		}		private function loop_7(e:Event){			recordedBytes_7.position = 0;			sc_7 = sound_7.play();//repeat the sound over and over again.			sc_7.addEventListener(Event.SOUND_COMPLETE, loop_7, false, 0, true);//loop through again		}		private function loop_8(e:Event){			recordedBytes_8.position = 0;			sc_8 = sound_8.play();//repeat the sound over and over again.			sc_8.addEventListener(Event.SOUND_COMPLETE, loop_8, false, 0, true);//loop through again		}		private function loop_9(e:Event){			recordedBytes_9.position = 0;			sc_9 = sound_9.play();//repeat the sound over and over again.			sc_9.addEventListener(Event.SOUND_COMPLETE, loop_9, false, 0, true);//loop through again		}		private function loop_10(e:Event){			recordedBytes_10.position = 0;			sc_10 = sound_10.play();//repeat the sound over and over again.			sc_10.addEventListener(Event.SOUND_COMPLETE, loop_10, false, 0, true);//loop through again		}		private function loop_11(e:Event){			recordedBytes_11.position = 0;			sc_11 = sound_11.play();//repeat the sound over and over again.			sc_11.addEventListener(Event.SOUND_COMPLETE, loop_11, false, 0, true);//loop through again		}		private function loop_12(e:Event){			recordedBytes_12.position = 0;			sc_12 = sound_12.play();//repeat the sound over and over again.			sc_12.addEventListener(Event.SOUND_COMPLETE, loop_12, false, 0, true);//loop through again		}		private function loop_13(e:Event){			recordedBytes_13.position = 0;			sc_13 = sound_13.play();//repeat the sound over and over again.			sc_13.addEventListener(Event.SOUND_COMPLETE, loop_13, false, 0, true);//loop through again		}		private function loop_14(e:Event){			recordedBytes_14.position = 0;			sc_14 = sound_14.play();//repeat the sound over and over again.			sc_14.addEventListener(Event.SOUND_COMPLETE, loop_14, false, 0, true);//loop through again		}		private function loop_15(e:Event){			recordedBytes_15.position = 0;			sc_15 = sound_15.play();//repeat the sound over and over again.			sc_15.addEventListener(Event.SOUND_COMPLETE, loop_15, false, 0, true);//loop through again		}		private function loop_16(e:Event){			recordedBytes_16.position = 0;			sc_16 = sound_16.play();//repeat the sound over and over again.			sc_16.addEventListener(Event.SOUND_COMPLETE, loop_16, false, 0, true);//loop through again		}		private function loop_17(e:Event){			recordedBytes_17.position = 0;			sc_17 = sound_17.play();//repeat the sound over and over again.			sc_17.addEventListener(Event.SOUND_COMPLETE, loop_17, false, 0, true);//loop through again		}		private function loop_18(e:Event){			recordedBytes_18.position = 0;			sc_18 = sound_18.play();//repeat the sound over and over again.			sc_18.addEventListener(Event.SOUND_COMPLETE, loop_18, false, 0, true);//loop through again		}		private function loop_19(e:Event){			recordedBytes_19.position = 0;			sc_19 = sound_19.play();//repeat the sound over and over again.			sc_19.addEventListener(Event.SOUND_COMPLETE, loop_19, false, 0, true);//loop through again		}		private function loop_20(e:Event){			recordedBytes_20.position = 0;			sc_20 = sound_20.play();//repeat the sound over and over again.			sc_20.addEventListener(Event.SOUND_COMPLETE, loop_20, false, 0, true);//loop through again		}		private function loop_21(e:Event){			recordedBytes_21.position = 0;			sc_21 = sound_21.play();//repeat the sound over and over again.			sc_21.addEventListener(Event.SOUND_COMPLETE, loop_21, false, 0, true);//loop through again		}		private function loop_22(e:Event){			recordedBytes_22.position = 0;			sc_22 = sound_22.play();//repeat the sound over and over again.			sc_22.addEventListener(Event.SOUND_COMPLETE, loop_22, false, 0, true);//loop through again		}		private function loop_23(e:Event){			recordedBytes_23.position = 0;			sc_23 = sound_23.play();//repeat the sound over and over again.			sc_23.addEventListener(Event.SOUND_COMPLETE, loop_23, false, 0, true);//loop through again		}		private function loop_24(e:Event){			recordedBytes_24.position = 0;			sc_24 = sound_24.play();//repeat the sound over and over again.			sc_24.addEventListener(Event.SOUND_COMPLETE, loop_24, false, 0, true);//loop through again		}																																///read all the bytes that are stored and then play them back below:		function playAudio_1(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_1.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_1.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}				function playAudio_2(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_2.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_2.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_3(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_3.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_3.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_4(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_4.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_4.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_5(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_5.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_5.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_6(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_6.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_6.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_7(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_7.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_7.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_8(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_8.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_8.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_9(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_9.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_9.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_10(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_10.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_10.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_11(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_11.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_11.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_12(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_12.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_12.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_13(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_13.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_13.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_14(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_14.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_14.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_15(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_15.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_15.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_16(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_16.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_16.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_17(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_17.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_17.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_18(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_18.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_18.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_19(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_19.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_19.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_20(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_20.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_20.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_21(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_21.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_21.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_22(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_22.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_22.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_23(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_23.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_23.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}		function playAudio_24(e:SampleDataEvent){			for(var i:int = 0; i< 8192 && recordedBytes_24.bytesAvailable > 0; i++){					var sample:Number = recordedBytes_24.readFloat();					e.data.writeFloat(sample);					e.data.writeFloat(sample);			}		}							}//end class}//end package